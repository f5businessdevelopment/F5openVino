working nginx.conf
 
(venv) [root@wsfd-advnetlab239 summit]# cat nginx.conf
http {
server {
    listen      172.16.3.200:443 ssl http2;
    server_name grpc.example.com;
 
    #ssl_certificate     /path/to/fullchain.pem;
    #ssl_certificate_key /path/to/privkey.pem;
    ssl_certificate /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;
    # proxy gRPC → your upstream
    location / {
        # these must match your gRPC host header
        grpc_set_header   Host              $http_host;
        grpc_set_header   X-Real-IP         $remote_addr;
        grpc_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        grpc_pass         grpc://model_servers;
    }
}
 
upstream model_servers {
    server 10.56.217.227:9999;
    # you can also add `keepalive` here
}
}
events {
    worker_connections 1024;
}
 
(venv) [root@wsfd-advnetlab239 summit]#



### corresponding grpc predict.py

 Working predict.py (Final):
(venv) [root@wsfd-advnetlab239 summit]# cat predict_with_arg.py
import argparse
import numpy as np
import cv2
from classes import imagenet_classes
from ovmsclient import make_grpc_client
 
LB_ADDR = "172.16.3.200:443"
 
# ── CONFIG ──────────────────────────────────────────────────────────────────
TLS_CONFIG = {
    "server_cert_path": "/root/summit/server.crt",
}
# ─────────────────────────────────────────────────────────────────────────────
 
def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(
        description="Run ResNet50 inference on an image via OVMS gRPC API"
    )
    parser.add_argument(
        "image_path",
        help="Path to the input image file",
    )
    args = parser.parse_args()
 
    # 1. Create the gRPC client (one-way TLS)
    client = make_grpc_client(LB_ADDR, tls_config=TLS_CONFIG)
 
    # 2. Load & preprocess the image
    img = cv2.imread(args.image_path)
    if img is None:
        raise FileNotFoundError(f"Image '{args.image_path}' not found or could not be opened")
 
    img = cv2.resize(img, (224, 224)).astype(np.float32)
    img = img.transpose((2, 0, 1))[None, ...]  # NHWC → NCHW
 
    # 3. Run inference
    output = client.predict({"0": img}, "resnet50")
    idx = int(np.argmax(output[0]))
    print(imagenet_classes[idx])
 
 
if __name__ == "__main__":
    main()
